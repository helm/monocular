package charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetChartVersionsHandlerFunc turns a function with the right signature into a get chart versions handler
type GetChartVersionsHandlerFunc func(GetChartVersionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChartVersionsHandlerFunc) Handle(params GetChartVersionsParams) middleware.Responder {
	return fn(params)
}

// GetChartVersionsHandler interface for that can handle valid get chart versions params
type GetChartVersionsHandler interface {
	Handle(GetChartVersionsParams) middleware.Responder
}

// NewGetChartVersions creates a new http.Handler for the get chart versions operation
func NewGetChartVersions(ctx *middleware.Context, handler GetChartVersionsHandler) *GetChartVersions {
	return &GetChartVersions{Context: ctx, Handler: handler}
}

/*GetChartVersions swagger:route GET /v1/charts/{repo}/{chartName}/versions charts getChartVersions

get all chart versions by repo/name

*/
type GetChartVersions struct {
	Context *middleware.Context
	Handler GetChartVersionsHandler
}

func (o *GetChartVersions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetChartVersionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

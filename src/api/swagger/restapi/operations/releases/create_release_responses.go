package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/helm/monocular/src/api/swagger/models"
)

/*CreateReleaseCreated Release created

swagger:response createReleaseCreated
*/
type CreateReleaseCreated struct {

	// In: body
	Payload *models.ResourceData `json:"body,omitempty"`
}

// NewCreateReleaseCreated creates CreateReleaseCreated with default headers values
func NewCreateReleaseCreated() *CreateReleaseCreated {
	return &CreateReleaseCreated{}
}

// WithPayload adds the payload to the create release created response
func (o *CreateReleaseCreated) WithPayload(payload *models.ResourceData) *CreateReleaseCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create release created response
func (o *CreateReleaseCreated) SetPayload(payload *models.ResourceData) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReleaseCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateReleaseDefault unexpected error

swagger:response createReleaseDefault
*/
type CreateReleaseDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateReleaseDefault creates CreateReleaseDefault with default headers values
func NewCreateReleaseDefault(code int) *CreateReleaseDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateReleaseDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create release default response
func (o *CreateReleaseDefault) WithStatusCode(code int) *CreateReleaseDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create release default response
func (o *CreateReleaseDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create release default response
func (o *CreateReleaseDefault) WithPayload(payload *models.Error) *CreateReleaseDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create release default response
func (o *CreateReleaseDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReleaseDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

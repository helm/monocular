package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CreateReleaseHandlerFunc turns a function with the right signature into a create release handler
type CreateReleaseHandlerFunc func(CreateReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateReleaseHandlerFunc) Handle(params CreateReleaseParams) middleware.Responder {
	return fn(params)
}

// CreateReleaseHandler interface for that can handle valid create release params
type CreateReleaseHandler interface {
	Handle(CreateReleaseParams) middleware.Responder
}

// NewCreateRelease creates a new http.Handler for the create release operation
func NewCreateRelease(ctx *middleware.Context, handler CreateReleaseHandler) *CreateRelease {
	return &CreateRelease{Context: ctx, Handler: handler}
}

/*CreateRelease swagger:route POST /v1/releases releases createRelease

Install a Helm chart version creating a release

*/
type CreateRelease struct {
	Context *middleware.Context
	Handler CreateReleaseHandler
}

func (o *CreateRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*CreateReleaseBody create release body

swagger:model CreateReleaseBody
*/
type CreateReleaseBody struct {

	/* Chart identifier, i.e: stable/wordpress

	Required: true
	*/
	ChartID *string `json:"chartId"`

	/* Chart Version

	Required: true
	*/
	ChartVersion *string `json:"chartVersion"`

	/* Simulate an install
	 */
	DryRun bool `json:"dryRun,omitempty"`

	/* Namespace to deploy the chart into
	 */
	Namespace string `json:"namespace,omitempty"`

	/* Name of the new release
	 */
	ReleaseName string `json:"releaseName,omitempty"`
}

// Validate validates this create release body
func (o *CreateReleaseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChartID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateChartVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateReleaseBody) validateChartID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"chartId", "body", o.ChartID); err != nil {
		return err
	}

	return nil
}

func (o *CreateReleaseBody) validateChartVersion(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"chartVersion", "body", o.ChartVersion); err != nil {
		return err
	}

	return nil
}

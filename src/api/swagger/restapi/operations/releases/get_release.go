package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReleaseHandlerFunc turns a function with the right signature into a get release handler
type GetReleaseHandlerFunc func(GetReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReleaseHandlerFunc) Handle(params GetReleaseParams) middleware.Responder {
	return fn(params)
}

// GetReleaseHandler interface for that can handle valid get release params
type GetReleaseHandler interface {
	Handle(GetReleaseParams) middleware.Responder
}

// NewGetRelease creates a new http.Handler for the get release operation
func NewGetRelease(ctx *middleware.Context, handler GetReleaseHandler) *GetRelease {
	return &GetRelease{Context: ctx, Handler: handler}
}

/*GetRelease swagger:route GET /v1/releases/{releaseName} releases getRelease

get a release from your cluster

*/
type GetRelease struct {
	Context *middleware.Context
	Handler GetReleaseHandler
}

func (o *GetRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

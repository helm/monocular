package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/helm/monocular/src/api/swagger/models"
)

/*CreateRepoCreated Repository added

swagger:response createRepoCreated
*/
type CreateRepoCreated struct {

	// In: body
	Payload *models.ResourceData `json:"body,omitempty"`
}

// NewCreateRepoCreated creates CreateRepoCreated with default headers values
func NewCreateRepoCreated() *CreateRepoCreated {
	return &CreateRepoCreated{}
}

// WithPayload adds the payload to the create repo created response
func (o *CreateRepoCreated) WithPayload(payload *models.ResourceData) *CreateRepoCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create repo created response
func (o *CreateRepoCreated) SetPayload(payload *models.ResourceData) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRepoCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateRepoDefault unexpected error

swagger:response createRepoDefault
*/
type CreateRepoDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateRepoDefault creates CreateRepoDefault with default headers values
func NewCreateRepoDefault(code int) *CreateRepoDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateRepoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create repo default response
func (o *CreateRepoDefault) WithStatusCode(code int) *CreateRepoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create repo default response
func (o *CreateRepoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create repo default response
func (o *CreateRepoDefault) WithPayload(payload *models.Error) *CreateRepoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create repo default response
func (o *CreateRepoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRepoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

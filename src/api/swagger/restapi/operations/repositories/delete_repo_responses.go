package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/helm/monocular/src/api/swagger/models"
)

/*DeleteRepoOK repo deleted

swagger:response deleteRepoOK
*/
type DeleteRepoOK struct {

	// In: body
	Payload *models.ResourceData `json:"body,omitempty"`
}

// NewDeleteRepoOK creates DeleteRepoOK with default headers values
func NewDeleteRepoOK() *DeleteRepoOK {
	return &DeleteRepoOK{}
}

// WithPayload adds the payload to the delete repo o k response
func (o *DeleteRepoOK) WithPayload(payload *models.ResourceData) *DeleteRepoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repo o k response
func (o *DeleteRepoOK) SetPayload(payload *models.ResourceData) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteRepoDefault unexpected error

swagger:response deleteRepoDefault
*/
type DeleteRepoDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepoDefault creates DeleteRepoDefault with default headers values
func NewDeleteRepoDefault(code int) *DeleteRepoDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteRepoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete repo default response
func (o *DeleteRepoDefault) WithStatusCode(code int) *DeleteRepoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete repo default response
func (o *DeleteRepoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete repo default response
func (o *DeleteRepoDefault) WithPayload(payload *models.Error) *DeleteRepoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repo default response
func (o *DeleteRepoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

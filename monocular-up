### This script should be run to install Monocular charts to your cluster
### Declare colors to use during the running of this script:
declare -r GREEN="\033[0;32m"
declare -r RED="\033[0;31m"
declare -r YELLOW="\033[0;33m"

function echo_green {
  echo -e "${GREEN}$1"; tput sgr0
}
function echo_red {
  echo -e "${RED}$1"; tput sgr0
}

### Download and install the required binary dependencies
echo_green "Installing essential binaries..."
sudo apt-get install -y nfs-common \
	make

### Download and install helm
echo_green "Installing helm..."
export HELM_VERSION=v2.6.2
export TMP_DIR=$(mktemp -d)
curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -zxv --strip-components=1 -C ${TMP_DIR}
sudo mv ${TMP_DIR}/helm /usr/local/bin/helm
rm -rf ${TMP_DIR}

###Download Openstack-Helm
echo_green "Downloading the openstack-helm repository..."
git clone https://github.com/openstack/openstack-helm.git /home/ubuntu/bootkube-ci/openstack-helm

### Setup Helm client
echo_green "Initializing Helm on both client & server..."
helm init
helm serve &
helm repo add local http://localhost:8879/charts

### WAIT FOR TILLER DEPLOYEMENT TO COME UP:
echo_red "Waiting for the Tiller pod to build..."
while true; do
  tiller_exist=$(sudo kubectl get pods --namespace kube-system | grep "tiller" | grep "Running" | grep "1/1" | wc -l)
  if [ "$tiller_exist" -ge 1 ]; then
    echo_green "Tiller running successfully!!"
    break
  fi
  echo -n "."
  sleep 2
done

###Run the make file from root of the Openstack-Helm directory to lint, package and push Helm charts to the local directory.
echo_green "Getting the Helm charts ready and available in the local repository..."
cd /home/ubuntu/bootkube-ci/openstack-helm
make

### LABEL THE NODES:
kubectl label nodes openstack-control-plane=enabled --all --overwrite=true

### Deploy the nfs-provisioner charts
helm install local/nfs-provisioner --name nfs-provisioner  --set storageclass.name=nfs-general --namespace registry
echo_red "Waiting for nfs-provisioner to come online..."
while true; do
  running_count=$(kubectl get pods -n registry --no-headers 2>/dev/null | grep "nfs-provisioner" | grep "Running" | grep "1/1" | wc -l)
  if [ "$running_count" -ge 1 ]; then
    break
  fi
  echo -n "."
  sleep 2
done
echo_green "SUCCESS"
echo_green "nfs-provisioner deployed and running!"

###Apply RBAC policies
kubectl apply -f /home/ubuntu/bootkube-ci/deploy-rbac/dev.yaml --validate=false

### Set default StorageClass to the nfs deployment to enable dynamic storage provisioning
kubectl patch storageclass nfs-general -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

### Deploy the nginx ingress from the stable repo
helm install stable/nginx-ingress --name default-ingress-controller --namespace registry --set controller.hostNetwork=true --set rbac.create=true
echo_red "Waiting for Ingress to come online..."
while true; do
  running_count=$(kubectl get pods -n registry --no-headers 2>/dev/null | grep "default-ingress-controller" | grep "Running" | grep "1/1" | wc -l)
  if [ "$running_count" -ge 2 ]; then
    break
  fi
  echo -n "."
  sleep 2
done
echo_green "SUCCESS"
echo_green "Ingress deployed and running!"

### Add the monocular repo to the Helm repo list and install the monoular charts
helm repo add monocular https://kubernetes-helm.github.io/monocular
helm install monocular/monocular --name monocular --namespace registry

echo_green "Monocular Helm chart deployement....COMPLETE!"

